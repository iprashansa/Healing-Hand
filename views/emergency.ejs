<!DOCTYPE html>
<html>
<head>
    <title>Nearby Hospitals and Medical Stores</title>
    <link rel="stylesheet" href="/emergency.css">
</head>
<body>
    <div class="container">
    <h3 id="Healed">Healed</h3>
    <h3 id="info">Nearby Hospitals and Medical Stores</h3>
    <div id="controls">
        <div class="search-wrapper">
            <input id="search-box" type="text" placeholder="Enter a location">
            <button class="search-button" onclick="manualSearch()">
                <span class="search-icon">&#128269;</span>
            </button>
        </div>
        <br>
        <div class="location-wrapper">
        <select id="start-location-select" onchange="toggleStartInput()">
            <option value="current">Use Current Location</option>
            <option value="manual">Enter Location Manually</option>
        </select>
        <input id="manual-start-box" type="text" placeholder="Enter start location" style="display: none">
        <input id="end-box" type="text" placeholder="Enter end location">
        </div>
        <div class="mode">
        <select id="travel-mode">
            <option value="DRIVING">Driving</option>
            <option value="WALKING">Walking</option>
            <option value="BICYCLING">Bicycling</option>
            <option value="TRANSIT">Transit</option>
        </select>
        <button id="btn" onclick="getDirectionsFromInput()">Get Directions</button>
    </div>
</div>
    <div id="route-details"></div>
    <div id="map"></div>
    <script>
    let map;
let service;
let infowindow;
let currentLocationMarker;
let userLocation;
let directionsService;
let directionsRenderer;
let routeDetailsDiv;
let trackingInterval;

function initMap() {
                fetch('/api-key')
                    .then(response => response.json())
                    .then(data => {
                        const apiKey = data.apiKey;
                        const script = document.createElement('script');
                        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=initializeMap`;
                        script.async = true;
                        script.defer = true;
                        document.body.appendChild(script);
                    });
            }

function initializeMap() {
    map = new google.maps.Map(document.getElementById("map"), {
        zoom: 14,
    });

    directionsService = new google.maps.DirectionsService();
    directionsRenderer = new google.maps.DirectionsRenderer({
        map: map,
        suppressMarkers: true
    });

    routeDetailsDiv = document.getElementById('route-details');

    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition((position) => {
            userLocation = {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
            };

            console.log('User Location:', userLocation);

            map.setCenter(userLocation);

            currentLocationMarker = new google.maps.Marker({
                position: userLocation,
                map: map,
                title: "Your Location",
                icon: {
                    url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                }
            });

            service = new google.maps.places.PlacesService(map);

            searchNearby(userLocation, 'hospital');
            searchNearby(userLocation, 'pharmacy');
        }, (error) => {
            console.error('Error obtaining location:', error);
            alert('Error obtaining location. Please ensure GPS is enabled and set to high accuracy mode.');
        }, {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 0
        });
    } else {
        alert("Geolocation is not supported by this browser.");
    }
}

function searchNearby(location, type) {
    const request = {
        location: location,
        radius: '5000',
        type: [type],
    };

    service.nearbySearch(request, (results, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
            for (let i = 0; i < results.length; i++) {
                createMarker(results[i]);
            }
        } else {
            console.error('Error fetching places:', status);
        }
    });
}

function createMarker(place) {
    const marker = new google.maps.Marker({
        map,
        position: place.geometry.location,
        title: place.name,
    });

    marker.addListener('click', function() {
        infowindow = new google.maps.InfoWindow({
            content: `<b>${place.name}</b><br>${place.vicinity}<br><button onclick="setDestination(${place.geometry.location.lat()}, ${place.geometry.location.lng()})">Set as Destination</button>`
        });
        infowindow.open(map, this);
    });
}

function setDestination(lat, lng) {
    const geocoder = new google.maps.Geocoder();
    const latlng = { lat: parseFloat(lat), lng: parseFloat(lng) };
    geocoder.geocode({ 'location': latlng }, (results, status) => {
        if (status === 'OK') {
            if (results[0]) {
                document.getElementById('end-box').value = results[0].formatted_address;
                getDirections(lat, lng);
            } else {
                alert('No results found');
            }
        } else {
            alert('Geocoder failed due to: ' + status);
        }
    });
}

function manualSearch() {
    const address = document.getElementById('search-box').value;
    const geocoder = new google.maps.Geocoder();

    geocoder.geocode({ 'address': address }, function(results, status) {
        if (status === google.maps.GeocoderStatus.OK) {
            const location = results[0].geometry.location;
            map.setCenter(location);

            searchNearby(location, 'hospital');
            searchNearby(location, 'pharmacy');
        } else {
            alert('Geocode was not successful for the following reason: ' + status);
        }
    });
}

function centerMapOnCurrentLocation() {
    if (userLocation) {
        map.setCenter(userLocation);
        map.setZoom(14);

        currentLocationMarker.setMap(map);
    } else {
        alert("Current location is not available.");
    }
}

function toggleStartInput() {
    const startLocationSelect = document.getElementById('start-location-select');
    const manualStartBox = document.getElementById('manual-start-box');
    
    if (startLocationSelect.value === 'manual') {
        manualStartBox.style.display = 'block';
    } else {
        manualStartBox.style.display = 'none';
    }
}

function getDirections(lat, lng) {
    const travelMode = document.getElementById('travel-mode').value;
    const startLocationSelect = document.getElementById('start-location-select');
    const startAddress = document.getElementById('manual-start-box').value;
    const geocoder = new google.maps.Geocoder();

    if (startLocationSelect.value === 'manual' && startAddress) {
        geocoder.geocode({ 'address': startAddress }, function(results, status) {
            if (status === 'OK') {
                const startLocation = results[0].geometry.location;

                const request = {
                    origin: startLocation,
                    destination: { lat: lat, lng: lng },
                    travelMode: google.maps.TravelMode[travelMode]
                };

                directionsService.route(request, (result, status) => {
                    if (status == 'OK') {
                        directionsRenderer.setDirections(result);

                        const route = result.routes[0].legs[0];
                        displayRouteDetails(route);

                        if (trackingInterval) {
                            clearInterval(trackingInterval);
                        }
                        trackingInterval = setInterval(() => trackUser(route), 5000);
                    } else {
                        alert('Directions request failed due to ' + status);
                    }
                });
            } else {
                alert('Geocode for start location was not successful for the following reason: ' + status);
            }
        });
    } else if (startLocationSelect.value === 'current' && userLocation) {
        const request = {
            origin: userLocation,
            destination: { lat: lat, lng: lng },
            travelMode: google.maps.TravelMode[travelMode]
        };

        directionsService.route(request, (result, status) => {
            if (status == 'OK') {
                directionsRenderer.setDirections(result);

                const route = result.routes[0].legs[0];
                displayRouteDetails(route);

                if (trackingInterval) {
                    clearInterval(trackingInterval);
                }
                trackingInterval = setInterval(() => trackUser(route), 5000);
            } else {
                alert('Directions request failed due to ' + status);
            }
        });
    } else {
        alert("Please enter the start location.");
    }
}

function getDirectionsFromInput() {
    const startLocationSelect = document.getElementById('start-location-select');
    const startAddress = document.getElementById('manual-start-box').value;
    const endAddress = document.getElementById('end-box').value;

    const geocoder = new google.maps.Geocoder();

    if (startLocationSelect.value === 'manual' && startAddress && endAddress) {
        geocoder.geocode({ 'address': startAddress }, function(results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
                const startLocation = results[0].geometry.location;

                geocoder.geocode({ 'address': endAddress }, function(results, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        const endLocation = results[0].geometry.location;

                        const travelMode = document.getElementById('travel-mode').value;
                        const request = {
                            origin: startLocation,
                            destination: endLocation,
                            travelMode: google.maps.TravelMode[travelMode]
                        };

                        directionsService.route(request, (result, status) => {
                            if (status == 'OK') {
                                directionsRenderer.setDirections(result);

                                const route = result.routes[0].legs[0];
                                displayRouteDetails(route);

                                if (trackingInterval) {
                                    clearInterval(trackingInterval);
                                }
                                trackingInterval = setInterval(() => trackUser(route), 5000);
                            } else {
                                alert('Directions request failed due to ' + status);
                            }
                        });
                    } else {
                        alert('Geocode for end location was not successful for the following reason: ' + status);
                    }
                });
            } else {
                alert('Geocode for start location was not successful for the following reason: ' + status);
            }
        });
    } else if (startLocationSelect.value === 'current' && endAddress) {
        geocoder.geocode({ 'address': endAddress }, function(results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
                const endLocation = results[0].geometry.location;

                const travelMode = document.getElementById('travel-mode').value;
                const request = {
                    origin: userLocation,
                    destination: endLocation,
                    travelMode: google.maps.TravelMode[travelMode]
                };

                directionsService.route(request, (result, status) => {
                    if (status == 'OK') {
                        directionsRenderer.setDirections(result);

                        const route = result.routes[0].legs[0];
                        displayRouteDetails(route);

                        if (trackingInterval) {
                            clearInterval(trackingInterval);
                        }
                        trackingInterval = setInterval(() => trackUser(route), 5000);
                    } else {
                        alert('Directions request failed due to ' + status);
                    }
                });
            } else {
                alert('Geocode for end location was not successful for the following reason: ' + status);
            }
        });
    } else {
        alert("Please enter both start and end locations.");
    }
}

function displayRouteDetails(route) {
    const distance = route.distance.text;
    const duration = route.duration.text;

    routeDetailsDiv.innerHTML = `Distance: ${distance}<br>Duration: ${duration}`;
}

function trackUser(route) {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition((position) => {
            const currentPosition = {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
            };

            console.log('Tracking user at:', currentPosition);

            if (currentLocationMarker) {
                currentLocationMarker.setPosition(currentPosition);
            } else {
                currentLocationMarker = new google.maps.Marker({
                    position: currentPosition,
                    map: map,
                    title: "Your Location",
                    icon: {
                        url: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                    }
                });
            }

            const distanceToDestination = google.maps.geometry.spherical.computeDistanceBetween(
                new google.maps.LatLng(currentPosition.lat, currentPosition.lng),
                new google.maps.LatLng(route.end_location.lat(), route.end_location.lng())
            );

            if (distanceToDestination < 50) { // Assuming destination is reached if within 50 meters
                clearInterval(trackingInterval);
                alert("You have reached your destination!");
            }
        }, (error) => {
            console.error('Error obtaining location:', error);
        }, {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 0
        });
    }
}

window.addEventListener('load', initMap);
</script>
    
</div>
</body>
</html>
